[require]
GL >= 4.5
GLSL >= 4.50
GL_ARB_shader_atomic_counter_ops

[vertex shader passthrough]

[fragment shader]
#extension GL_ARB_shader_atomic_counter_ops: require

layout(binding = 0) buffer bufblock {
	int value;
};

/* GL_ARB_shader_atomic_counters requires at least 8 total counters. */
layout(binding = 0) uniform atomic_uint mask[7];
layout(binding = 0) uniform atomic_uint fail;

out vec4 color;

void main()
{
	/* According to issue #22 of the GL_ARB_shader_image_load_store, the
	 * return result of atomic operations in helper invocations is
	 * undefined.  To avoid a possible infinite loop (below) in a helper
	 * invocation, bail out now.
	 */
	if (gl_HelperInvocation)
		return;

	/* Each of 32 * N fragments should see a unique value.  Each value
	 * observed is tracked in "mask."  The test automatically fails if a
	 * duplicate value is observed.  After the shaders are done running,
	 * the mask values will be probed to ensure that all possible values
	 * were observed.
	 */
	int f;
	uint i;
	int c;

	/* This is an open-coded atomicAdd. */
	do {
		f = value;

		i = uint(f) / 4u;
		c = int(i / 32u);

		/* Stop when values won't fit in the mask array. */
		if (c >= mask.length()) {
			color = vec4(0.0, 0.0, 1.0, 1.0);
			return;
		}
	} while (f != atomicCompSwap(value, f, f + 4));

	uint bit = i % 32u;
	uint m = 1u << bit;

	/* If the bit was already set, the test fails. */
	if ((atomicCounterOrARB(mask[c], m) & m) != 0u)
		atomicCounterIncrement(fail);

	color = vec4(0.0, 1.0, 0.0, 1.0);
}

[test]
atomic counters 8

ssbo 0 32
ssbo 0 subdata float 0 0.0

clear color 0.5 0.5 0.5 0.5
clear

draw rect -1 -1 2 2

probe atomic counter 0 == 4294967295
probe atomic counter 1 == 4294967295
probe atomic counter 2 == 4294967295
probe atomic counter 3 == 4294967295
probe atomic counter 4 == 4294967295
probe atomic counter 5 == 4294967295
probe atomic counter 6 == 4294967295
probe atomic counter 7 == 0

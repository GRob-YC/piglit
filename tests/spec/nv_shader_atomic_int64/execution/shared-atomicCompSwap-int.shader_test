[require]
GL >= 4.2
GLSL >= 4.30
GL_ARB_compute_shader
GL_ARB_shader_atomic_counters
GL_ARB_gpu_shader_int64
GL_NV_shader_atomic_int64

[compute shader]
#version 430
#extension GL_ARB_compute_shader: require
#extension GL_ARB_shader_atomic_counters: require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_NV_shader_atomic_int64 : require

layout(local_size_x = 32) in;

shared int64_t value;
shared uint mask;

layout(binding = 0) uniform atomic_uint pass;
layout(binding = 0) uniform atomic_uint fail;

void main()
{
	if (gl_LocalInvocationIndex == 0u) {
		value = 0;
		mask = 0u;
	}

	barrier();

	/* Each local invocation should see a unique value.  Each value
	 * observed is tracked in "mask."  The test automatically fails if a
	 * duplicate value is observed.  The test passes once all 32 possible
	 * values have been observed.
	 */
	int64_t f = value;
	int64_t a;

	/* This is an open-coded atomicAdd. */
	do {
		a = f;
	} while ((f = atomicCompSwap(value, f, f + 4)) != a);

	uint i = uint(f) / 4u;
	uint bit = i % 32u;
	uint m = 1u << bit;

	if (i < 32u) {
		/* If the bit was already set, the test fails. */
		uint r = atomicOr(mask, m);
		if ((r & m) != 0u)
			atomicCounterIncrement(fail);

		/* Once all 32 bits are set, the test passes. */
		if ((r | m) == 0xffffffffu)
			atomicCounterIncrement(pass);
	} else {
		atomicCounterIncrement(fail);
	}
}

[test]
atomic counters 2
compute 2 3 4
probe atomic counter 0 == 24
probe atomic counter 1 == 0

[require]
GL >= 4.2
GLSL >= 4.30
GL_ARB_compute_shader
GL_ARB_shader_atomic_counters
GL_ARB_gpu_shader_int64
GL_NV_shader_atomic_int64

[compute shader]
#version 430
#extension GL_ARB_compute_shader: require
#extension GL_ARB_shader_atomic_counters: require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_NV_shader_atomic_int64 : require

layout(local_size_x = 32) in;

shared int64_t value;
shared uint mask;

layout(binding = 0) uniform atomic_uint pass;
layout(binding = 0) uniform atomic_uint fail;

void main()
{
	if (gl_LocalInvocationIndex == 0u) {
		/* Bootstrapping this with zero is unavoidable, bit it
		 * also causes problems later.  Namely it means that
		 * bit 0 will get set twice and invocation 0 can see a
		 * zero value.  Note the explicit checks for bit != 0
		 * and gl_LocalInvocationIndex != 0 below.
		 */
		value = 0;
		mask = 0u;
	}

	barrier();

	int64_t f = atomicExchange(value, 2 * int64_t(gl_LocalInvocationIndex));
	uint i = uint(f) / 2u;
	uint bit = i % 32u;
	uint m = 1u << bit;

	if (i < 32u) {
		/* If the bit was already set, the test fails. */
		uint r = atomicOr(mask, m);
		if (bit != 0u && (r & m) != 0u)
			atomicCounterIncrement(fail);

		/* Invocation index 0 can read it's own index (due to
		 * bootstrapping with zero), but no other invocation should.
		 */
		if (gl_LocalInvocationIndex != 0u &&
		    bit == gl_LocalInvocationIndex)
			atomicCounterIncrement(fail);
	} else {
		atomicCounterIncrement(fail);
	}

	barrier();

	if (gl_LocalInvocationIndex == 0u) {
		uint i = uint(value / 2);
		uint bit = i % 32u;
		uint m = 1u << bit;

		uint final = m | mask;

		/* If all 32 bits are set, the test passes. */
		if (final == 0xffffffffu)
			atomicCounterIncrement(pass);
	}
}

[test]
atomic counters 2
compute 2 3 4
probe atomic counter 0 == 24
probe atomic counter 1 == 0

# According to ARB_tessellation_shader
#
# The number of components of active per-patch output variables may not
# exceed the value of gl_MaxTessPatchComponents.
# gl_TessLevelOuter[] and gl_TessLevelInner[] are not counted against the
# per-patch limit.

[require]
GLSL >= 1.50
GL_ARB_tessellation_shader


[vertex shader passthrough]

[tessellation control shader]
#version 150
#extension GL_ARB_tessellation_shader: require
layout(vertices = 3) out;

patch out ivec4 f[gl_MaxTessPatchComponents / 4];

void main() {
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	gl_TessLevelOuter = float[4](1.0, 1.0, 1.0, 0.0);
	gl_TessLevelInner = float[2](0.0, 0.0);

	for (int i = 0; i < f.length(); i++)
		f[i] = ivec4(i * 4, i * 4 + 1, i * 4 + 2, i * 4 + 3);
}


[tessellation evaluation shader]
#version 150
#extension GL_ARB_tessellation_shader: require

layout(triangles) in;

patch in ivec4 f[gl_MaxTessPatchComponents / 4];
out vec4 color;

void main() {
	gl_Position = gl_in[0].gl_Position * gl_TessCoord[0]
	            + gl_in[1].gl_Position * gl_TessCoord[1]
	            + gl_in[2].gl_Position * gl_TessCoord[2];

	bool ok = true;
	for (int i = 0; i < f.length(); i++) {
		if (f[i] != ivec4(i * 4, i * 4 + 1, i * 4 + 2, i * 4 + 3))
		ok = false;
	}

	color = ok ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
}


[fragment shader]
#version 150

in vec4 color;

void main()
{
  gl_FragColor = color;
}

[vertex data]
piglit_vertex/float/2
-1.0 -1.0
 1.0 -1.0
-1.0  1.0
-1.0  1.0
 1.0 -1.0
 1.0  1.0

[test]
clear color 0.1 0.1 0.1 0.1
clear
patch parameter vertices 3
draw arrays GL_PATCHES 0 6
probe all rgba 0.0 1.0 0.0 1.0

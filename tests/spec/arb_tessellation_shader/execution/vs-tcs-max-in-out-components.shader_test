# According to GL 3.2 section 2.11.6 ("Varying Variables") and
# ARB_tessellation_shader
#
#  All components of any varying and special variable written are counted
# against the gl_MaxVertexOutputComponents limit.
#  All components of any varying and special variable read are counted
# against the gl_MaxTessControlInputComponents limit.
#  gl_Position is a special variables, thus it takes 4 components.

[require]
GLSL >= 1.50
GL_ARB_tessellation_shader


[vertex shader]
#version 150
#extension GL_ARB_tessellation_shader: require

in vec4 piglit_vertex;

out Data {
  out ivec4 f[min(gl_MaxVertexOutputComponents, gl_MaxTessControlInputComponents) / 4 - 1];
} data;

void main()
{
	gl_Position = piglit_vertex;

	for (int i = 0; i < data.f.length(); i++)
		data.f[i] = ivec4(i * 4, i * 4 + 1, i * 4 + 2, i * 4 + 3);
}

[tessellation control shader]
#version 150
#extension GL_ARB_tessellation_shader: require
layout(vertices = 3) out;

in Data {
	ivec4 f[min(gl_MaxVertexOutputComponents, gl_MaxTessControlInputComponents) / 4 - 1];
} data[];

out int tcs_result[3];

void main() {
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	gl_TessLevelOuter = float[4](1.0, 1.0, 1.0, 0.0);
	gl_TessLevelInner = float[2](0.0, 0.0);

	tcs_result[gl_InvocationID] = 1;
	for (int i = 0; i < data[gl_InvocationID].f.length(); i++) {
		if (data[gl_InvocationID].f[i] != ivec4(i * 4, i * 4 + 1, i * 4 + 2, i * 4 + 3))
			tcs_result[gl_InvocationID] = 0;
	}
}

[tessellation evaluation shader]
#version 150
#extension GL_ARB_tessellation_shader: require

layout(triangles) in;

in int tcs_result[gl_MaxPatchVertices];
out vec4 color;

void main() {
	gl_Position = gl_in[0].gl_Position * gl_TessCoord[0]
	            + gl_in[1].gl_Position * gl_TessCoord[1]
	            + gl_in[2].gl_Position * gl_TessCoord[2];

	bool ok = true;
	for (int i = 0; i < 3; i++) {
		ok = ok && (tcs_result[i] == 1);
	}

	color = ok ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
}

[fragment shader]
#version 150

in vec4 color;

void main()
{
  gl_FragColor = color;
}

[vertex data]
piglit_vertex/float/2
-1.0 -1.0
 1.0 -1.0
-1.0  1.0
-1.0  1.0
 1.0 -1.0
 1.0  1.0

[test]
clear color 0.1 0.1 0.1 0.1
clear
patch parameter vertices 3
draw arrays GL_PATCHES 0 6
probe all rgba 0.0 1.0 0.0 1.0

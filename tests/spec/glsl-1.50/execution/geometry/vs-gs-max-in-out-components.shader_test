# According to GL 3.2 section 2.12 ("GEOMETRY SHADERS",
# "Geometry Shader Outputs") and section 2.11.6 ("Varying Variables")
#
#  All components of any varying and special variable written are counted
# against the gl_MaxVertexOutputComponents limit.
#  All components of any varying and special variable read are counted
# against the gl_MaxGeometryInputComponents limit.
#  gl_Position is a special variables, thus it takes 4 components.

[require]
GLSL >= 1.50
GL_ARB_arrays_of_arrays


[vertex shader]
#version 150

in vec4 piglit_vertex;

flat out ivec4 f[min(gl_MaxVertexOutputComponents, gl_MaxGeometryInputComponents) / 4 - 1];

void main()
{
  gl_Position = piglit_vertex;

  for (int i = 0; i < f.length(); i++)
    f[i] = ivec4(i * 4, i * 4 + 1, i * 4 + 2, i * 4 + 3);
}

[geometry shader]
#version 150
#extension GL_ARB_arrays_of_arrays: require

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

flat in ivec4 f[3][min(gl_MaxVertexOutputComponents, gl_MaxGeometryInputComponents) / 4 - 1];
out vec4 color;

void main()
{
  bool ok = true;
  for (int v_idx = 0; v_idx < 3; v_idx++) {
    for (int i = 0; i < f[v_idx].length(); i++) {
      if (f[v_idx][i] != ivec4(i * 4, i * 4 + 1, i * 4 + 2, i * 4 + 3))
        ok = false;
    }
  }

  for (int i = 0; i < 3; i++) {
    gl_Position = gl_in[i].gl_Position;

    color = ok ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);

    EmitVertex();
  }

  EndPrimitive();
}

[fragment shader]
#version 150

in vec4 color;

void main()
{
  gl_FragColor = color;
}

[test]
clear color 0.0 0.0 0.0 0.0
clear
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0
